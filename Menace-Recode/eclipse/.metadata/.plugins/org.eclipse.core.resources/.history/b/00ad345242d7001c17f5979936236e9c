package dev.menace;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.Stack;

import org.lwjgl.opengl.Display;

import com.mojang.authlib.exceptions.AuthenticationException;
import com.thealtening.utilities.SSLVerification;

import dev.menace.event.EventManager;
import dev.menace.event.EventTarget;
import dev.menace.event.events.EventKey;
import dev.menace.module.ModuleManager;
import dev.menace.utils.altmanager.LoginManager;
import net.minecraft.client.Minecraft;
import viamcp.ViaMCP;

public class Menace {

	public static Menace instance = new Menace();
	
	public Minecraft MC = Minecraft.getMinecraft();
	public EventManager eventManager = new EventManager();
	public ModuleManager moduleManager = new ModuleManager();
	
	public void startClient() {
		System.out.println("[Menace] Starting Client...");
		
		Display.setTitle("Menace 1.8.9 - Recode");
		
		eventManager.register(this);
		
		try
		{
		  ViaMCP.getInstance().start();
		  ViaMCP.getInstance().initAsyncSlider();
		}
		catch (Exception e)
		{
		  e.printStackTrace();
		}
		
		SSLVerification ssl = new SSLVerification();
		ssl.verify();
		
		dump(Field.class, 3);
		
		try {
			LoginManager.alteningPremiumLogin("api-q3d9-4mc2-tmtp");
		} catch (NoSuchFieldException | IllegalAccessException | AuthenticationException e) {
			e.printStackTrace();
		}
	}
	
	public void stopClient() {
		
	}
	
	@EventTarget
	public void onKey(EventKey event) {
		moduleManager.getModules().stream().filter(m -> m.getKeybind() == event.getKey()).forEach(module -> {
			module.toggle();
		});
	}
	
	public static String dump(Object o, int callCount) {
	    callCount++;
	    StringBuffer tabs = new StringBuffer();
	    for (int k = 0; k < callCount; k++) {
	        tabs.append("\t");
	    }
	    StringBuffer buffer = new StringBuffer();
	    Class oClass = o.getClass();
	    if (oClass.isArray()) {
	        buffer.append("\n");
	        buffer.append(tabs.toString());
	        buffer.append("[");
	        for (int i = 0; i < Array.getLength(o); i++) {
	            if (i < 0)
	                buffer.append(",");
	            Object value = Array.get(o, i);
	            if (value.getClass().isPrimitive() ||
	                    value.getClass() == java.lang.Long.class ||
	                    value.getClass() == java.lang.String.class ||
	                    value.getClass() == java.lang.Integer.class ||
	                    value.getClass() == java.lang.Boolean.class
	                    ) {
	                buffer.append(value);
	            } else {
	                buffer.append(dump(value, callCount));
	            }
	        }
	        buffer.append(tabs.toString());
	        buffer.append("]\n");
	    } else {
	        buffer.append("\n");
	        buffer.append(tabs.toString());
	        buffer.append("{\n");
	        while (oClass != null) {
	            Field[] fields = oClass.getDeclaredFields();
	            for (int i = 0; i < fields.length; i++) {
	                buffer.append(tabs.toString());
	                fields[i].setAccessible(true);
	                buffer.append(fields[i].getName());
	                buffer.append("=");
	                try {
	                    Object value = fields[i].get(o);
	                    if (value != null) {
	                        if (value.getClass().isPrimitive() ||
	                                value.getClass() == java.lang.Long.class ||
	                                value.getClass() == java.lang.String.class ||
	                                value.getClass() == java.lang.Integer.class ||
	                                value.getClass() == java.lang.Boolean.class
	                                ) {
	                            buffer.append(value);
	                        } else {
	                            buffer.append(dump(value, callCount));
	                        }
	                    }
	                } catch (IllegalAccessException e) {
	                    buffer.append(e.getMessage());
	                }
	                buffer.append("\n");
	            }
	            oClass = oClass.getSuperclass();
	        }
	        buffer.append(tabs.toString());
	        buffer.append("}\n");
	    }
	    return buffer.toString();
	}
	
}
