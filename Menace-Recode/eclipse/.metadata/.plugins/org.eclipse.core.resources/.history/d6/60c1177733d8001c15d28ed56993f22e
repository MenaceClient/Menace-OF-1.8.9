package dev.menace.ui.clickgui.csgo.buttons.setting.settings;

import java.awt.Color;
import java.io.IOException;

import org.lwjgl.input.Keyboard;

import dev.menace.module.BaseModule;
import dev.menace.module.settings.Setting;
import dev.menace.module.settings.ToggleSetting;
import dev.menace.ui.clickgui.csgo.buttons.setting.CSSetting;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.Gui;

public class CSSettingBind {

	public int x, y, width, height;
	public Minecraft mc = Minecraft.getMinecraft();
	public FontRenderer fr = mc.fontRendererObj;
	public BaseModule mod;
	public String name;
	public boolean binding;
	
	public CSSettingBind(int x, int y, int width, int height, BaseModule mod) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.mod = mod;
		name = "Bind: " + Keyboard.getKeyName(mod.getKeybind());
		binding = false;
	}
	
	public void drawScreen(int mouseX, int mouseY, float partialTicks) {

		fr.drawString(name, x, y, Integer.MAX_VALUE);

		int stringwidth = fr.getStringWidth(name);
		
		Gui.drawRect(x, y, x + stringwidth, y + fr.FONT_HEIGHT, 0xFF000000);
		
		/*
		Gui.drawRect(x + stringwidth + 20, y, x + stringwidth + 30, y + 10, 0xFF000000);
		Gui.drawFullCircle(x + stringwidth + 20, y + 5, 5, new Color(0xFF000000, true));
		Gui.drawFullCircle(x + stringwidth + 30, y + 5, 5, new Color(0xFF000000, true));
		Gui.drawFullCircle(x + stringwidth, y + 5, 5, new Color(Integer.MAX_VALUE * 2, true));
		*/
	}

	public void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
		if (isHovered(mouseX, mouseY) && mouseButton == 0) {
			name = "Binding...";
			binding = true;
		}
	}
	
	public void keyTyped(int key) {
		if (binding) {
			if (key == Keyboard.KEY_DELETE || key == Keyboard.KEY_ESCAPE) {
				name = "Bind: " + Keyboard.getKeyName(mod.getKeybind());
				binding = false;
				return;
			}
			
			mod.setKeybind(key);
			name = "Bind: " + Keyboard.getKeyName(mod.getKeybind());
			binding = false;
		}
	}

	private boolean isHovered(int mouseX, int mouseY) {
		int stringwidth = fr.getStringWidth(name);
		boolean hoveredx = mouseX > this.x + stringwidth + 15 && mouseX < this.x + stringwidth + 35;
		boolean hoveredy = mouseY > this.y && mouseY < this.y + 10;
		return hoveredx && hoveredy;
	}

}
