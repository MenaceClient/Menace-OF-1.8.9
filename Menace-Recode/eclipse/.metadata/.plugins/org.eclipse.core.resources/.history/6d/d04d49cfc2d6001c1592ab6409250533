package dev.menace.module;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;

import com.google.gson.JsonObject;

import dev.menace.module.modules.combat.*;
import dev.menace.module.modules.fun.*;
import dev.menace.module.modules.misc.*;
import dev.menace.module.modules.movement.*;
import dev.menace.module.modules.player.*;
import dev.menace.module.modules.render.*;
import dev.menace.module.modules.world.*;
import dev.menace.module.settings.BoolSetting;
import dev.menace.module.settings.DoubleSetting;
import dev.menace.module.settings.StringSetting;
import dev.menace.utils.misc.file.FileManager;
import net.minecraft.crash.CrashReport;

public class ModuleManager {

	public ArrayList<Module> modules = new ArrayList<Module>();
	public String selectedConfig = "default";

	


	public ModuleManager() {
		try
		{
			for(Field field : ModuleManager.class.getDeclaredFields())
			{
				if(!field.getName().endsWith("Module"))
					continue;

				Module module = (Module)field.get(this);
				modules.add(module);
			}

		}catch(Exception e)
		{
			String message = "Initializing Menace modules";
			CrashReport report = CrashReport.makeCrashReport(e, message);
		}
	}

	public ArrayList<Module> getModules() {
		return modules;
	}

	public ArrayList<Module> getActiveModules() {
		ArrayList<Module> activeModules = new ArrayList<Module>();

		for (Module m : modules) {
			if (m.isToggled()) activeModules.add(m);
		}

		return activeModules;
	}

	public void saveModules(String configName) {
		JsonObject configFile = new JsonObject();
		this.modules.forEach(module -> {
			JsonObject modSave = new JsonObject();

			modSave.addProperty("Toggled", module.isToggled());
			modSave.addProperty("Visible", module.isVisible());

			if (!module.settings.isEmpty()) {
				JsonObject settingSave = new JsonObject();
				module.settings.forEach(setting -> {

					if (setting instanceof BoolSetting) {
						settingSave.addProperty(setting.getName(), ((BoolSetting)setting).isChecked());
					} else if (setting instanceof DoubleSetting) {
						settingSave.addProperty(setting.getName(), ((DoubleSetting)setting).getValue());
					} else if (setting instanceof StringSetting) {
						settingSave.addProperty(setting.getName(), ((StringSetting)setting).getString());
					}

				});
				modSave.add("Settings", settingSave);
			}

			configFile.add(module.getName(), modSave);
		});
		FileManager.writeJsonToFile(new File(FileManager.getConfigFolder(), configName + ".json"), configFile);
		this.selectedConfig = configName;
	}

	public void loadModules(String configName) {
		JsonObject configFile = FileManager.readJsonFromFile(new File(FileManager.getConfigFolder(), configName + ".json"));
		this.modules.stream().filter(mod -> configFile.has(mod.getName())).forEach(module -> {
			JsonObject modSave = configFile.get(module.getName()).getAsJsonObject();
			boolean toggled = modSave.get("Toggled").getAsBoolean();
			if ((toggled && !module.isToggled()) || (!toggled && module.isToggled())) {
				module.toggle();
			}
			boolean visible = modSave.get("Visible").getAsBoolean();
			module.setVisible(visible);
			if (!module.settings.isEmpty() && modSave.has("Settings")) {
				JsonObject settingSave = modSave.get("Settings").getAsJsonObject();
				module.settings.forEach(setting -> {
					if (settingSave.has(setting.getName())) {
						if (setting instanceof BoolSetting) {
							((BoolSetting)setting).setChecked(settingSave.get(setting.getName()).getAsBoolean());
						} else if (setting instanceof DoubleSetting) {
							((DoubleSetting)setting).setValue(settingSave.get(setting.getName()).getAsDouble());
						} else if (setting instanceof StringSetting) {
							((StringSetting)setting).setString(settingSave.get(setting.getName()).getAsString());
						}
					}
				});
			}
		});
		this.selectedConfig = configName;
	}

	public void saveKeys() {
		JsonObject bindFile = new JsonObject();
		this.modules.forEach(module -> {
			bindFile.addProperty(module.getName(), module.getKey());
		});
		FileManager.writeJsonToFile(new File(FileManager.getConfigFolder(), "Binds.json"), bindFile);
	}
	
	public Module getModuleByName(String name) {
		return modules.stream().filter(module -> module.getName().equalsIgnoreCase(name)).findFirst().orElse(null);
	}

	public ArrayList<Module> getModulesByCategory(Category c) {
		ArrayList<Module> list = new ArrayList<Module>();
		modules.stream().forEach(module ->{ 
			if (module.getCategory().equals(c)) {
				list.add(module);
			}
		});
		return list;
	}

}